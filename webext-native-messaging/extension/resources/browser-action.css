:root {
  --color-neutral: #555555;
  --color-warning: #E09040;
  --color-failure: #E04040;
}

/* Force page width, preventing possible displayed width change when changing
 * tab (especially from any tab to the 'options' tab).
 */
html, body {
  width: 600px;
}

.center-content {
  text-align: center;
}

.hidden {
  display: none;
}

/* Fix SVG icons size. */
.icon svg {
  width: 20px;
}

/* Default SVG icon color. */
.icon svg path {
  fill: var(--color-neutral);
}

/* Error SVG icon color. */
.error svg path {
  fill: var(--color-failure);
}

/* Warning SVG icon color. */
.warning svg path {
  fill: var(--color-warning);
}

/* Based on Firefox browser style 'panel-list-item'.
 * We don't fix the height. Also change horizontal padding to have more space
 * between icon and content.
 *
 * IMPORTANT: don't use 'panel-list-item' naming as it may already be applied
 * even if 'browser_stye' is not enabled; especially in the options page.
 */
.list-item {
  align-items: center;
  display: flex;
  flex-direction: row;
  border: 1px solid rgba(0, 0, 0, 0.1);
  padding: 2px 10px 2px 0px;
  background-color: rgba(0, 0, 0, 0.02);
}

.list-item:hover {
  background-color: rgba(0, 0, 0, 0.06);
}

.list-item .icon {
  flex-grow: 0;
  flex-shrink: 0;
  padding: 0px 10px;
}

.list-item .list-item-text {
  flex-grow: 10;
}

.list-item .list-item-title {
  font-weight: bold;
}

.list-item .list-item-subtitle {
  font-style: italic;
}

.clickable, .clickable * {
  cursor: pointer;
  user-select: none;
}

/* A CSS trick, relatively to spectre elements, to handle tabs without
 * Javascript code.
 * See: https://github.com/picturepan2/spectre/issues/161
 *
 * Tabs are handled through grouped radio inputs (one per tab).
 * Tab content is hidden by default. Only the selected tab content, determined
 * by the index of the checked input, is displayed.
 *
 * Notes:
 * We must at least handle indexes up to the maximum number of tabs.
 * The original example works with a few restrictions: the 'tab-locator' inputs
 * needed to be on the same level than 'tab' (the nominal spectre items
 * representing tabs to select) and 'tabs' (holding each 'tab-content').
 * Using the 'tab' node is still needed to apply special styling. But we use our
 * own 'tabs-items' class so that we can have 'tab' inside if necessary (e.g.
 * inside a 'panel' 'panel-nav' section): we don't expect to recursively embed
 * items (unlike the content which could contain another tab menu) so we don't
 * enforce direct descendance for 'tab-item' nodes.
 */
.tab-content {
  display: none;
}

.tab-locator:nth-of-type(1):checked ~ .tabs-items .tab-item:nth-of-type(1) > label > a,
.tab-locator:nth-of-type(2):checked ~ .tabs-items .tab-item:nth-of-type(2) > label > a,
.tab-locator:nth-of-type(3):checked ~ .tabs-items .tab-item:nth-of-type(3) > label > a,
.tab-locator:nth-of-type(4):checked ~ .tabs-items .tab-item:nth-of-type(4) > label > a,
.tab-locator:nth-of-type(5):checked ~ .tabs-items .tab-item:nth-of-type(5) > label > a {
  border-bottom-color: #5764c6;
  color: #5764c6;
}

.tab-locator:nth-of-type(1):checked ~ .tabs-content > .tab-content:nth-of-type(1),
.tab-locator:nth-of-type(2):checked ~ .tabs-content > .tab-content:nth-of-type(2),
.tab-locator:nth-of-type(3):checked ~ .tabs-content > .tab-content:nth-of-type(3),
.tab-locator:nth-of-type(4):checked ~ .tabs-content > .tab-content:nth-of-type(4),
.tab-locator:nth-of-type(5):checked ~ .tabs-content > .tab-content:nth-of-type(5) {
  display: block;
}
